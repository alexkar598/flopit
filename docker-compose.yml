name: "flopit"
services:
  nginx:
    image: nginx:1.25.3-alpine-slim
    networks:
      - backend
    links:
      - minio
      - imgproxy
    configs:
      - source: nginx
        target: /etc/nginx/nginx.conf
    restart: unless-stopped
    ports:
      - 9090:80
  mariadb:
    build:
      dockerfile: mariadb.Dockerfile
      context: compose
    healthcheck:
      test: [
        "CMD",
        "healthcheck.sh",
        "--su-mysql",
        "--connect",
        "--innodb_initialized"
      ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 1s
    networks:
      - backend
    restart: unless-stopped
    environment:
      MARIADB_AUTO_UPGRADE: 1
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
      MARIADB_DATABASE: ${MARIADB_DB}
      MARIADB_USER: ${MARIADB_USER}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD}
    volumes:
      - mariadb:/var/lib/mysql
      - mariadb-import:/import
  redis:
    image: redis:7.0-alpine3.19
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 1s
    networks:
      - backend
    restart: unless-stopped
    volumes:
      - redis:/data
    environment:
      REDIS_ARGS: "--timeout 90"
  minio:
    image: minio/minio:RELEASE.2024-02-04T22-36-13Z
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 1s
    command: ["minio", "server", "/data", "--console-address", ":9001"]
    networks:
      - backend
    volumes:
      - minio:/data
    restart: unless-stopped
    environment:
      MINIO_SCANNER_SPEED: slowest
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
      MINIO_SITE_REGION: ${S3_REGION}
  createbuckets:
    image: minio/mc:RELEASE.2024-01-31T08-59-40Z
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - backend
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add minio http://minio:9000 ${S3_ACCESS_KEY} ${S3_SECRET_KEY};
      /usr/bin/mc mb minio/images;
      exit 0;"
  imgproxy:
    links:
      - minio
    image: darthsim/imgproxy:v3.21.0
    healthcheck:
      test: [ "CMD", "imgproxy", "health" ]
      timeout: "10s"
      interval: "1m30s"
      retries: 3
      start_period: 40s
      start_interval: 1s
    networks:
      - backend
    restart: unless-stopped
    environment:
      IMGPROXY_KEY: ${IMGPROXY_KEY}
      IMGPROXY_SALT: ${IMGPROXY_SALT}
      IMGPROXY_QUALITY: 85
      IMGPROXY_WORKERS: 8
      IMGPROXY_REQUESTS_QUEUE_SIZE: 32
      IMGPROXY_PATH_PREFIX: '/image/'
      IMGPROXY_ENABLE_DEBUG_HEADERS: true
      IMGPROXY_DEVELOPMENT_ERRORS_MODE: true
      IMGPROXY_MAX_SRC_RESOLUTION: 100 #megapixels
      IMGPROXY_MAX_SRC_FILE_SIZE: 10485760
      IMGPROXY_MAX_ANIMATION_FRAMES: 24
      IMGPROXY_ALLOW_ORIGIN: "*"
      IMGPROXY_ALLOWED_SOURCES: s3://, https://
      IMGPROXY_PREFERRED_FORMATS: webp,gif
      IMGPROXY_JPEG_PROGRESSIVE: true
      IMGPROXY_USE_S3: true
      IMGPROXY_S3_ENDPOINT: http://minio:9000/
      AWS_ACCESS_KEY_ID: ${S3_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${S3_SECRET_KEY}
      IMGPROXY_S3_REGION: ${S3_REGION}
      IMGPROXY_MALLOC: tcmalloc
  db-deploy:
    build:
      dockerfile: server/db-deploy.Dockerfile
    networks:
      - backend
    environment:
      PRISMA_MARIADB_URL: ${PRISMA_ROOT_MARIADB_URL}
    restart: on-failure
    depends_on:
      mariadb:
        condition: service_healthy
    links:
      - mariadb
  seed:
    profiles: ["seed", "test"]
    build:
      dockerfile: server/seed.Dockerfile
    networks:
      - backend
    restart: on-failure
  test:
    profiles: ["test"]
    build:
      context: client
      dockerfile: test.Dockerfile
    environment:
      APP_URL: http://nginx
    networks:
      - backend
    depends_on:
      seed:
        condition: service_completed_successfully
networks:
  backend:
volumes:
  mariadb:
  mariadb-import:
  minio:
  redis:
configs:
  nginx:
    content: |
      user  nginx;
      worker_processes  auto;

      error_log  stderr notice;
      pid        /var/run/nginx.pid;


      events {
        worker_connections  1024;
      }


      http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$$remote_addr - $$remote_user [$$time_local] "$$request" '
        '$$status $$body_bytes_sent "$$http_referer" '
        '"$$http_user_agent" "$$http_x_forwarded_for"';

        access_log /dev/stdout main;

        sendfile        on;
        absolute_redirect off;

        keepalive_timeout  65;

        proxy_cache_path /etc/nginx/cache levels=1:2 keys_zone=images:10m max_size=2g;

        server {
          listen       80;
          listen  [::]:80;

          location / {
            proxy_pass http://client:4200;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $$http_upgrade;
            proxy_set_header Connection "upgrade";
          }

          location = /graphql {
            proxy_set_header   Host $$host;
            proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
            proxy_pass http://apiserver:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $$http_upgrade;
            proxy_set_header Connection "upgrade";
            client_max_body_size 100M;
          }

          location /_minio {
            rewrite /_minio/(.*) /$$1 break;
            proxy_set_header   Host $$host;
            proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
            proxy_pass http://minio:9001;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $$http_upgrade;
            proxy_set_header Connection "upgrade";
            sub_filter '<base href="/"/>' '<base href="/_minio/"/>';
            client_max_body_size 100M;
          }

          location /_db/ {
            proxy_redirect     off;
            proxy_set_header   Host $$host;
            proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
            proxy_pass http://cloudbeaver:8978;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $$http_upgrade;
            proxy_set_header Connection "upgrade";
          }

          location /image/ {
            proxy_cache images;
            proxy_pass http://imgproxy:8080;
          }
        }
      }
