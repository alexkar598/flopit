// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource mariadb {
  provider = "mysql"
  url      = env("PRISMA_MARIADB_URL")
}

enum Theme {
  Light
  Dark
}

model User {
  id String @id @default(dbgenerated("(uuid())")) @mariadb.Char(36)

  username String @unique @mariadb.VarChar(64)
  email    String @unique @mariadb.VarChar(320)
  password Bytes  @mariadb.Binary(255)
  salt     Bytes  @mariadb.Binary(32)

  avatar_oid String? @mariadb.Char(40)
  theme      Theme   @default(Dark)

  Sessions          Session[]
  ModeratedSubs     Moderator[]
  FollowedSubs      Follow[]
  BannedFrom        Ban[]
  Posts             Post[]
  Votes             Vote[]
  BlockedBy         Block[]            @relation(name: "Blockee")
  Blocked           Block[]            @relation(name: "Blocker")
  PushNotifications PushNotification[]
  Conversations         Conversation[] @relation(name: "Owner")
  ConversationsReceived Conversation[] @relation(name: "Target")
}

model Session {
  id String @id @default(dbgenerated("(uuid())")) @mariadb.Char(36)

  User    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user_id String @mariadb.Char(36)

  creation_time   DateTime  @default(dbgenerated("current_timestamp(3)"))
  revocation_time DateTime?

  @@index([user_id, revocation_time, creation_time])
}

model PushNotification {
  id String @id @default(dbgenerated("(uuid())")) @mariadb.Char(36)

  User    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user_id String @mariadb.Char(36)

  endpoint        String    @mariadb.VarChar(512)
  expiration_time DateTime?
  p256dh          Bytes     @mariadb.Binary(65)
  auth            Bytes     @mariadb.Binary(16)
}

model Block {
  Blocked    User   @relation(fields: [blocked_id], references: [id], onDelete: Cascade, onUpdate: Restrict, name: "Blockee")
  blocked_id String @mariadb.Char(36)

  Blocker    User   @relation(fields: [blocker_id], references: [id], onDelete: Cascade, onUpdate: Restrict, name: "Blocker")
  blocker_id String @mariadb.Char(36)

  @@id([blocked_id, blocker_id])
}

model Sub {
  id String @id @default(dbgenerated("(uuid())")) @mariadb.Char(36)

  name        String @unique @mariadb.VarChar(64)
  description String @default("") @mariadb.VarChar(512)

  icon_oid   String? @mariadb.Char(40)
  banner_oid String? @mariadb.Char(40)

  Moderators Moderator[]
  Followers  Follow[]
  Bans       Ban[]
  Posts      Post[]

  @@fulltext([description])
}

model Moderator {
  User    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user_id String @mariadb.Char(36)

  Sub    Sub    @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  sub_id String @mariadb.Char(36)

  @@id([user_id, sub_id])
}

model Ban {
  id String @id @default(dbgenerated("(uuid())")) @mariadb.Char(36)

  User    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user_id String @mariadb.Char(36)

  Sub    Sub    @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  sub_id String @mariadb.Char(36)

  reason String   @mariadb.VarChar(512)
  expiry DateTime
}

model Follow {
  User    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  user_id String @mariadb.Char(36)

  Sub    Sub    @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  sub_id String @mariadb.Char(36)

  @@id([user_id, sub_id])
}

enum TextContentType {
  Link
  Text
  None
}

model TopPost {
  id String @id @default(dbgenerated("(uuid())")) @mariadb.Char(36)

  title String @mariadb.VarChar(256)

  Attachments Attachment[]
  Post        Post[]

  @@fulltext([title])
}

model Post {
  id String @id @default(dbgenerated("(uuid())")) @mariadb.Char(36)

  Sub    Sub    @relation(fields: [sub_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  sub_id String @mariadb.Char(36)

  Author    User?   @relation(fields: [author_id], references: [id], onDelete: SetNull, onUpdate: Restrict)
  author_id String? @mariadb.Char(36)

  created_at DateTime @default(now())

  text_content  String @mariadb.Text
  delta_content Json

  TopPost     TopPost @relation(fields: [top_post_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  top_post_id String  @mariadb.Char(36)

  Parent    Post?   @relation(fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: Restrict, name: "chains")
  parent_id String? @mariadb.Char(36)
  Children  Post[]  @relation(name: "chains")

  Votes        Vote[]
  cached_votes BigInt

  // Colonnes virtuelles

  hotness Float @default(dbgenerated()) @mariadb.Double

  @@index([sub_id, parent_id, created_at])
  @@index([sub_id, parent_id, cached_votes])
  @@index([parent_id, created_at])
  @@index([parent_id, cached_votes])
  @@fulltext([text_content])
}

enum AttachmentType {
  Image
  Video
  Link
}

model Attachment {
  TopPost     TopPost        @relation(fields: [top_post_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  top_post_id String         @mariadb.Char(36)
  order       Int            @mariadb.UnsignedTinyInt
  type        AttachmentType

  content String @mariadb.VarChar(2048)

  @@id([top_post_id, order])
}

model Vote {
  id String @id @default(dbgenerated("(uuid())")) @mariadb.Char(36)

  User    User?   @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: Restrict)
  user_id String? @mariadb.Char(36)

  Post    Post   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  post_id String @mariadb.Char(36)

  value Int @mariadb.TinyInt

  @@unique([user_id, post_id])
  @@index([user_id, post_id, value])
}

model Conversation {
  Owner    User   @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: Restrict, name: "Owner")
  owner_id String @mariadb.Char(36)

  Target    User   @relation(fields: [target_id], references: [id], onDelete: Cascade, onUpdate: Restrict, name: "Target")
  target_id String @mariadb.Char(36)

  last_interact DateTime @default(now())

  @@id([owner_id, target_id])
}
